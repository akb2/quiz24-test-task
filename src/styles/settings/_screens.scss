@use '../functions/maps' as _maps;
@use '../functions/math' as _math;





//----------------------------------------------------------------------------------------------------------------------------------------
// Настройки
//----------------------------------------------------------------------------------------------------------------------------------------


  // Контрольные точки
  $breakpoints: (
    maximal: 10000,
    large: 1800,
    medium: 1200,
    middle: 900,
    small: 600,
    all: 0,
  );


  // Сортировка контрольных точек
  $breakpoints-sort: (
    default: ( maximal, large, medium, middle, small, all ),
    to-min: ( all, small, middle, medium, large, maximal ),
  );


  // Где начинается мобайл
  $mobile: middle;
  $mobile_resolution: _maps.get( $breakpoints, $mobile );


//----------------------------------------------------------------------------------------------------------------------------------------
// Настройки
//----------------------------------------------------------------------------------------------------------------------------------------





//----------------------------------------------------------------------------------------------------------------------------------------
// Миксины
//----------------------------------------------------------------------------------------------------------------------------------------


  // Подобрать нужный размер экрана
  @mixin for-size( $screen, $vector: to-min ) {
    @if ( _maps.has-key( $breakpoints, $screen )) {
      $cur: _maps.get( $breakpoints, $screen );
      $min: get-min( $cur );
      $max: get-max( $cur );



      // Диапазон от текущего до большего
      @if ( $vector == min-to-max ) {
        @media ( min-width: #{ get-range( $cur, min )}px ) and ( max-width: #{ get-range( $max, max )}px )
          { @content; }
      }

      // Диапазон от текущего до меньшего
      @else if ( $vector == max-to-min ) {
        @media ( min-width: #{ get-range( $min, min )}px ) and ( max-width: #{ get-range( $cur, max )}px )
          { @content; }
      }

      // Диапазон от меньшего без предела
      @else if ( $vector == to-min ) {
        @if ( $cur > 0 ) {
          @media ( min-width: #{ get-range( $cur, min )}px )
            { @content; }
        }
        @else
          { @content; }
      }

      // Диапазон от меньшего без предела
      @else {
        @media ( max-width: #{ get-range( $cur, max )}px )
          { @content; }
      }
    }

    @else {
      @content;
    }
  }


  // Свойства для разных размеров экрана
  @mixin media( $properties ) {
    @each $property, $values in $properties {

      // Одно свойство
      @if ( type-of( $values ) == 'string' )
        { #{ $property }: #{ $values }; }

      // Список свойств
      @else if ( type-of( $values ) == 'map' ) {
        $vector: to-min;
        @if ( _maps.has-key( $values, vector )) { $vector: _maps.get( $values, vector ); }

        @each $screen in _maps.get( $breakpoints-sort, $vector ) {
          @if ( _maps.has-key( $values, $screen ) or $screen == 'all' ) {
            $value: _maps.get( $values, $screen );
            @include for-size( $screen, $vector ) {
              #{ $property }: #{ $value };
            }
          }
        }
      }
    }
  }


//----------------------------------------------------------------------------------------------------------------------------------------
// Миксины
//----------------------------------------------------------------------------------------------------------------------------------------





//----------------------------------------------------------------------------------------------------------------------------------------
// Функции
//----------------------------------------------------------------------------------------------------------------------------------------


  // Ближайшая меньшая граница
  @function get-min ( $cur ) {
    $ret: _maps.get( $breakpoints, all );
    @each $key, $value in $breakpoints {
      @if ( $value < $cur )
        { $ret: max( $ret, $value ); }
    }

    @return $ret;
  }


  // Ближайшая большая граница
  @function get-max ( $cur ) {
    $ret: _maps.get( $breakpoints, maximal );
    @each $key, $value in $breakpoints {
      @if ( $value > $cur )
        { $ret: min( $ret, $value ); }
    }

    @return $ret;
  }


  // Получить значение для определения границ
  @function get-range ( $value, $vector:min ) {
    // Получить верхнюю границу
    @if ( $vector == max )
      { @return _math.round( $value - 0.001, 0.001 ); }
    // Получить нижнюю границу
    @else
      { @return $value; }
  }


//----------------------------------------------------------------------------------------------------------------------------------------
// Функции
//----------------------------------------------------------------------------------------------------------------------------------------